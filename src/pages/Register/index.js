import React, { useState } from "react";
import { Button, Form, Input, Skeleton, Typography, notification, DatePicker, Radio, Select, Checkbox } from "antd";

import "./style.scss";

import { getAuth, createUserWithEmailAndPassword } from "firebase/auth";
import { ref, uploadBytesResumable, getDownloadURL } from "firebase/storage"
import { db, storage } from "../../firebase/firebase";
import { doc, updateDoc, arrayUnion } from "firebase/firestore";
import  { Redirect } from 'react-router-dom'


import '../MyProfile/MyProfile.scss';

const { Title } = Typography;

const collectionId = "Bright-Boost";

const Register = (props) => {
  const [api, contextHolder] = notification.useNotification();
  const [isLoading, setIsLoading] = useState(false); 
  const [numSubjects, setNumSubjects] = useState(0); 
  const [subsPlan, setSubsPlan] = useState(""); 
  const [profPicFile, setProfPicFile] = useState("");

  const subjectOptions = [
    { label: 'Mathematics', value: 'Mathematics' },
    { label: 'History', value: 'History' },
    { label: 'Computing', value: 'Computing' }
  ];
  
  const subsStartDate = new Date(new Date().setHours(0, 0, 0, 0));
  const month = subsStartDate.getMonth();
  const subsEndDate = new Date(new Date(new Date().setMonth(month + 12)).setHours(0, 0, 0, 0));

  const BasicSubscription = {
    subscriptionName: "Basic",
    subsStartDate: subsStartDate,
    subsEndDate: subsEndDate,
    price: 100,
  }

  const IntermediateSubscription = {
    subscriptionName: "Intermediate",
    subsStartDate: subsStartDate,
    subsEndDate: subsEndDate,
    price: 200,
  }

  const AdvancedSubscription = {
    subscriptionName: "Advanced",
    subsStartDate: subsStartDate,
    subsEndDate: subsEndDate,
    price: 300,
  }

  const subscriptionOptions = [ BasicSubscription, IntermediateSubscription, AdvancedSubscription ];


  const navigate = useNavigate();
  const openNotification = (notifTitle, notifContent) => {
    api.open({
             message: notifTitle,
             description: notifContent,
       });
    };

    function handleProfPicFile(event) {
        setProfPicFile(event.target.files[0]);
    }

    const selectSubjects = (checkedValues) => {
        setNumSubjects(checkedValues.length);
    };

  function SubscriptionPlan(props) {
    const numSubjects = props.numSubjects;
    if (numSubjects == 1) {
        setSubsPlan("Basic");
        return <h2>Basic</h2>;
    }
    else if (numSubjects == 2) {
        setSubsPlan("Intermediate");
        return <h2>Intermediate</h2>;
    }
    else if (numSubjects == 3) {
        setSubsPlan("Advanced");
        return <h2>Advanced</h2>;
    }
    else if (numSubjects == 0) {
        setSubsPlan("");
        return <h2>TBD by system</h2>;
    }
  }

  async function registerAndUpload(values) {
    if (profPicFile) {
        const ppStorage = ref(storage, `/files/${profPicFile.name}`)
        const ppUpload = uploadBytesResumable(ppStorage, profPicFile);
        ppUpload.on(
            "state_changed",
            (snapshot) => {},
            (err) => console.log(err),
            () => {
                getDownloadURL(ppUpload.snapshot.ref).then((ppURL) => {
                    setProfPicFile("");
                    registerRecord(values, ppURL);
                });
            }
        ); 
    }
    else {
        registerRecord(values, "");
    }
  }

  async function registerRecord(values, ppURL) {
    const streetAddress = values.streetAddress ? values.streetAddress : "";
    const city = values.city ? values.city : "";
    const country = values.country ? values.country : "";
    const postalCode = values.postalCode ? values.postalCode : "";

    await updateDoc(doc(db, collectionId, "accounts"), {
        accounts: arrayUnion({
            /* username, role, and account activation */
            emailAddress: values.emailAddress,
            role: "Student",
            active: false,

            /* personal particulars */
            id: Math.floor(Math.random() * Date.now() * Math.random()).toString().substring(0, 12),           // autogenerated (student/tutor/admin) ID;
            firstName: values.firstName,
            lastName: values.lastName,
            dateOfBirth: new Date(new Date(values.dateOfBirth.toString("yyyy-MM-dd")).setHours(0, 0, 0, 0)),
            gender: values.gender,       
            phoneNumber: values.phoneNumber,

            /* address details */
            streetAddress: streetAddress,
            city: city,
            country: country,
            postalCode: postalCode,

            /* profile picture */
            imageURL: ppURL,           

            /* subscription info */
            subcriptionName: subscriptionOptions[numSubjects - 1].subscriptionName,       
            subsStartDate: subscriptionOptions[numSubjects - 1].subsStartDate,      
            subsEndDate: subscriptionOptions[numSubjects - 1].subsEndDate,      
            price: subscriptionOptions[numSubjects - 1].price,                  

            /* enrolment info */
            subjectsEnrolled: values.subjectsEnrolled
        })
    }).then(() => {
        openNotification("Success", "Student registration is successful");
        window.setInterval(function () {
            navigate("/login");
        }, 1000);
    });
  }

  const registerFormRef = React.createRef();
  const auth = getAuth();

  const handleRegister = async (values) => {
	setIsLoading(true);
	createUserWithEmailAndPassword(auth, values.emailAddress, values.password).then((userCredential) => {
    	const user = userCredential.user;
        registerAndUpload(values);
  	}).catch((error) => {
    	const errorCode = error.code;
    	const errorMessage = error.message;
		setIsLoading(false);
		openNotification(
            "Failed", 
            "Student registration is failed (" + errorCode + "): " + errorMessage
        );
  	});
  } 

  if (isLoading) {
	return (
		<>
            {contextHolder}
            <div class="bg">
			    <Skeleton />	
            </div>
		</>
	);
  }
 
  return (
	<>
		{contextHolder}
	  	<div className="bg">	
	  		<Typography>
				<Title>{"Bright Boost - Student Registration"}</Title>
	  		</Typography>
	  		<Form
              		labelCol={{ span: 8 }}
    				wrapperCol={{ span: 16 }}
    				style={{ maxWidth: 600 }}	
              		onFinish={handleRegister}
	  			    ref={registerFormRef}
            >
	  			
	  			<Form.Item
                    label="E-mail Address"
                    className="form-group"	
                    name="emailAddress"
                    rules={[
                        { required: true, message: "Please enter the e-mail address!" },
                    ]}
                >
                    <Input />
                </Form.Item>
	
	  			<Form.Item
                    label="Password"
                    className="form-group"
                    name="password"
                    rules={[{ required: true, message: "Please enter the password!" }]}
                >
                        <Input.Password />
                </Form.Item>
	  			<Form.Item
                    label="Confirm Password"
                    className="form-group"
                    name="confirmPassword"
                    dependencies={['password']}
                    hasFeedback
                    rules={[
                        { required: true, message: "Please confirm the password!" },
                        ({ getFieldValue }) => ({
                            validator(_, value) {
                                if (!value || getFieldValue('password') === value) {
                                    return Promise.resolve();
                                }
                                return Promise.reject(new Error('Passwords do not match'));
                            },
                        })
                    ]}
                >
                        <Input.Password />
                </Form.Item>

	  			<Form.Item
                    label="First Name"
	  				className="form-group"
                    name="firstName"
                    rules={[
                        { required: true, message: "Please input your first name" },
                    ]}
                >
                    <Input />
                </Form.Item>
	
				<Form.Item
                    label="Last Name"	
                    className="form-group"
                    name="lastName"
                    rules={[{ required: true, message: "Please input your last name" }]}
                >
                    <Input />
                </Form.Item>

			 	<Form.Item
                    label="Date of Birth"
                    className="form-group"
                    name="dateOfBirth"
                    rules={[
                        { required: true, message: "Please input your date of birth" },
                    ]}
                >
                    <DatePicker />
                </Form.Item>
					
				<Form.Item
                    label="Gender"
                    className="form-group"
                    name="gender"
                    rules={[{ required: true, message: "Please input your gender" }]}
                >
                    <Radio.Group>
	  					<Radio value="F">Female</Radio>
	  					<Radio value="M">Male</Radio>
	  					<Radio value="O">Other</Radio>
	  				</Radio.Group>
                </Form.Item>
			
	  			<Form.Item
                    label="Phone Number"
                    className="form-group"	
                    name="phoneNumber"
                    rules={[{ required: true, message: "Please enter the phone number!" }]}
                >
                    <Input />
                </Form.Item>
	
				<Form.Item
                    label="Street Address"
                    className="form-group"	
                    name="streetAddress"                  		
	  			>
                    <Input />
                </Form.Item>		
			
				<Form.Item label="City" className="form-group" name="city">
                    <Input />
                </Form.Item>

	  			<Form.Item label="Country" className="form-group" name="country">
                    <Select placeholder="Please select a country">
        				<Select.Option value="Australia">Australia</Select.Option>
       					<Select.Option value="Other">Other</Select.Option>
      				</Select>		
                </Form.Item>	

	  			<Form.Item label="Postal code" className="form-group" name="postalCode">
                    <Input />
                </Form.Item>	
                
                <Form.Item
                    label="Subjects to be Enrolled"
                    className="form-group"
                    name="subjectsEnrolled"
                    rules={[
                        { required: true, message: "Please choose subject(s) to be enrolled" },
                    ]}
                >
                    <Checkbox.Group options={subjectOptions} defaultValue={['Mathematics']} onChange={selectSubjects} />
                </Form.Item>
                <Form.Item
                    label="Subscription Plan:"
                    className="form-group"
                    name="subsPlan"
                >
                    <SubscriptionPlan numSubjects={numSubjects} />
                </Form.Item>
                <Form.Item
                    label="Upload Profile Picture"
                    className="form-group"
                    name="profilePictureFile"
                >
                    <input type="file" accept="image/*" onChange={handleProfPicFile}/>
                </Form.Item>
                <Form.Item
                    wrapperCol={{
                        offset: 8,
                        span: 16,
                    }}
                >
                    <Button type="primary" htmlType="submit">Register</Button>
                </Form.Item>
	  		</Form> 
	  	</div>
	  </>
  );
};

export default Register;
